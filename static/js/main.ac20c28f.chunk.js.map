{"version":3,"sources":["Roulette.js","App.js","serviceWorker.js","index.js"],"names":["loca","Roulette","props","roulette","bind","state","kekka","locaNo","Math","floor","random","length","this","setState","className","id","onClick","url","options","lang","text","hashtags","Component","require","on","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAIMA,EAAO,CACb,uCACA,uCACA,iCACA,iCACA,uCACA,uCACA,mDACA,6CACA,uCACA,uCACA,uCACA,6CACA,uCACA,mDACA,2BACA,2BACA,2BACA,2BACA,2BACA,iCACA,iCACA,mDACA,mDACA,uCACA,mDACA,mDACA,mDACA,mDACA,6CACA,uCACA,yDACA,yDACA,yDACA,yDACA,qBACA,qBACA,6CACA,iCACA,qBACA,uCACA,iCACA,6CACA,iCACA,mDACA,iCACA,iCACA,8CA6CeC,E,kDAhCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,MAAS,CAACC,MAAM,kCAHL,E,uDAOhB,IAAMC,EAASC,KAAKC,MAAOD,KAAKE,SAAWV,EAAKW,QAE5CL,EAAQN,EAAKO,GACjBK,KAAKC,SAAS,CAACP,MAAMA,M,+BAKjB,OACE,6BACA,uBAAGQ,UAAU,SAAb,8BACA,uBAAGC,GAAG,UAAUH,KAAKP,MAAMC,OAC3B,4BAAQS,GAAG,MAAMC,QAASJ,KAAKT,UAA/B,8CACA,6BACA,kBAAC,IAAD,CACEc,IAAI,iCACJC,QAAU,CAAEC,KAAK,KACLC,KAAK,kBAAD,OAAmBR,KAAKP,MAAMC,MAA9B,+BACJe,SAAS,yD,GA1BVC,aC1DRC,EAAQ,IACdC,KAoBMC,MAlBf,WACE,OACE,yBAAKX,UAAU,OACb,yBAAKC,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,WACR,4BAAQD,UAAU,UAChB,wBAAIA,UAAU,MAAd,4EACA,uBAAGA,UAAU,KAAb,mIAAwC,6BAAxC,iHAEF,0BAAMA,UAAU,QAChB,kBAAC,EAAD,OAEA,4BAAQA,UAAU,UAAS,uBAAGA,UAAU,QAAO,+FCTjCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ac20c28f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.css';\r\nimport { Share } from 'react-twitter-widgets';\r\n\r\nconst loca = [\r\n\"外地ラノシア\",\r\n\"高地ラノシア\",\r\n\"西ラノシア\",\r\n\"東ラノシア\",\r\n\"中央ラノシア\",\r\n\"低地ラノシア\",\r\n\"ウルヴズジェイル\",\r\n\"リムサロミンサ\",\r\n\"北ザナラーン\",\r\n\"西ザナラーン\",\r\n\"東ザナラーン\",\r\n\"中央ザナラーン\",\r\n\"南ザナラーン\",\r\n\"ゴールドソーサー\",\r\n\"ウルダハ\",\r\n\"北部森林\",\r\n\"東部森林\",\r\n\"中央森林\",\r\n\"南部森林\",\r\n\"グリダニア\",\r\n\"モードゥナ\",\r\n\"クルザス西部高地\",\r\n\"クルザス中央高地\",\r\n\"イシュガルド\",\r\n\"イディルシャイア\",\r\n\"高地ドラヴァニア\",\r\n\"低地ドラヴァニア\",\r\n\"ドラヴァニア雲海\",\r\n\"アバラシア雲海\",\r\n\"アジス・ラー\",\r\n\"ギラバニア辺境地帯\",\r\n\"ギラバニア山岳地帯\",\r\n\"ギラバニア湖畔地帯\",\r\n\"ラールガーズリーチ\",\r\n\"紅玉海\",\r\n\"ヤンサ\",\r\n\"アジムステップ\",\r\n\"ドマ町人地\",\r\n\"クガネ\",\r\n\"レイクランド\",\r\n\"コルシア島\",\r\n\"アム・アレーン\",\r\n\"イル・メグ\",\r\n\"ラケティカ大森林\",\r\n\"テンペスト\",\r\n\"ユールモア\",\r\n\"クリスタリウム\",\r\n]\r\n\r\n//function roulette(){\r\n//    const locaNo = Math.floor( Math.random() * loca.length);\r\n//    let result = document.getElementById(\"result\");\r\n//    let kekka = loca[locaNo];\r\n//    result.innerText = kekka;\r\n//    //console.log(loca[locaNo]);\r\n//}\r\n\r\n\r\nclass Roulette extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.roulette = this.roulette.bind(this)\r\n    this.state = ({kekka:\"エオルゼア\"})\r\n  }\r\n\r\n  roulette(){\r\n    const locaNo = Math.floor( Math.random() * loca.length);\r\n    //let result = document.getElementById(\"result\");\r\n    let kekka = loca[locaNo];\r\n    this.setState({kekka:kekka});\r\n   // result.innerText = kekka;\r\n  }\r\n  \r\n      render() {\r\n        return (\r\n          <div>\r\n          <p className=\"text1\">今日のSSは</p>\r\n          <p id=\"result\">{this.state.kekka}</p>\r\n          <button id=\"btn\" onClick={this.roulette}>場所を決める！</button>\r\n          <br/>\r\n          <Share\r\n            url=\"https://locationroulette.site/\" \r\n            options= {{ lang:\"ja\",\r\n                        text:`FFXIV snaps at ${this.state.kekka} byロケルレ`,\r\n                        hashtags:\"ロケルレ,FF14,FF14風景\"}}\r\n          />\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Roulette;","import React from 'react';\nimport './App.css';\nimport Roulette from './Roulette';\n\n\nvar noScroll = require('no-scroll');\nnoScroll.on();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"stars\"></div>\n      <div id=\"stars2\"></div>\n      <div id=\"stars3\"></div>\n      <header className=\"header\">\n        <h1 className=\"h1\">ロケーションルーレット！</h1>\n        <p className=\"p\">風景SSを撮りたいけどロケーションが決まらない<br/>そんなあなたにピッタリのサイトです！</p>\n      </header>\n      <main className=\"main\">\n      <Roulette/>\n      </main>\n      <footer className=\"footer\"><p className=\"copy\"><small>Copyright (C) SQUARE ENIX CO., LTD. All Rights Reserved.</small></p></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}